<?php

namespace Mamaison\AnnonceBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * AnnonceRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AnnonceRepository extends EntityRepository
{

    public function findAnnonceById($annonce)
    {
        $query = $this->queryInVilleFindAll();
        $result = $query->where('a.id = :id')
            ->setParameter("id", $annonce)
            ->getQuery()
            ->execute();
        return $result != null ? $result[0] : null;
    }

    public function findAllAnnonce($ville = null)
    {
        $query = $this->queryInVilleFindAll($ville);
        $result = $query->getQuery()->execute();
//        if (count($result) < 50) {
//            $result = array_merge($result, $this->queryInNotVilleFindAll($ville)->getQuery()->execute());
//        }
        return $result;
    }

    public function findAnnonceByType($typeAnnonce, $ville = null)
    {

        $query = $this->queryInVilleFindAll($ville, true, $typeAnnonce);
        $resultVille = $query->getQuery()->execute();

//        if (count($resultVille) < 50) {
//            $resultVille = array_merge($resultVille, $this->queryInNotVilleFindAll($ville, true, $typeAnnonce)->getQuery()->execute());
//        }
        return $resultVille;
    }

    public function findAnnonceByTypeAndCategory($ville,$type,$category){
        $query = $this->queryfindAnnonceByTypeAndCategoryInVille($ville, $type, $category);
        $resultVille = $query->getQuery()->execute();

//        if (count($resultVille) < 50) {
//            $resultVille = array_merge($resultVille, $this->queryfindAnnonceByTypeAndCategoryInNotVille($ville, $type,$category)->getQuery()->execute());
//        }
        return $resultVille;
    }

    private function queryfindAnnonceByTypeAndCategoryInVille($ville,$type,$category){
        $query = $this->createQueryBuilder('a')
            ->leftJoin('a.category', 'category')
            ->leftJoin('a.quartier', 'quartier')
            ->leftJoin('a.user', 'user')
            ->leftJoin('a.caracteristiques', 'caracteristiques')
            ->leftJoin('a.galleries', 'galleries')
            ->leftJoin('a.typeAnnonce', 'typeAnnonce')
            ->leftJoin('a.likes', 'likes')
            ->leftJoin('a.rating', 'rating')
            ->addSelect('category')
            ->addSelect('quartier')
            ->addSelect('user')
            ->addSelect('caracteristiques')
            ->addSelect('galleries')
            ->addSelect('typeAnnonce')
            ->addSelect('likes')
            ->addSelect('rating')
            ->leftJoin('quartier.ville', 'ville')
            ->addSelect('ville')
            ->where('ville.nom = :ville')
            ->setParameter('ville', $ville)
            ->andWhere('typeAnnonce.valeur = :typeAnnonce')
            ->setParameter('typeAnnonce',$type)
            ->andWhere('category.type = :category')
            ->setParameter('category',$category);
        return $query;
    }


    private function queryfindAnnonceByTypeAndCategoryInNotVille($ville,$type,$category){
        $query = $this->createQueryBuilder('a')
            ->leftJoin('a.category', 'category')
            ->leftJoin('a.quartier', 'quartier')
            ->leftJoin('a.user', 'user')
            ->leftJoin('a.caracteristiques', 'caracteristiques')
            ->leftJoin('a.galleries', 'galleries')
            ->leftJoin('a.typeAnnonce', 'typeAnnonce')
            ->leftJoin('a.likes', 'likes')
            ->leftJoin('a.rating', 'rating')
            ->addSelect('category')
            ->addSelect('quartier')
            ->addSelect('user')
            ->addSelect('caracteristiques')
            ->addSelect('galleries')
            ->addSelect('typeAnnonce')
            ->addSelect('likes')
            ->addSelect('rating')
            ->leftJoin('quartier.ville', 'ville')
            ->addSelect('ville')
            ->where('ville.nom != :ville')
            ->setParameter('ville', $ville)
            ->andWhere('typeAnnonce.valeur = :typeAnnonce')
            ->setParameter('typeAnnonce',$type)
            ->andWhere('category.type = :category')
            ->setParameter('category',$category);
        return $query;
    }

    /**
     * @param bool $findByType
     * @param null $typeAnnonce
     * @return \Doctrine\ORM\QueryBuilder
     * @throws \Exception
     */
    private function queryInVilleFindAll($ville = null, $findByType = false, $typeAnnonce = null)
    {
        $query = $this->createQueryBuilder('a')
            ->leftJoin('a.category', 'category')
            ->leftJoin('a.quartier', 'quartier')
            ->leftJoin('a.user', 'user')
            ->leftJoin('a.caracteristiques', 'caracteristiques')
            ->leftJoin('a.galleries', 'galleries')
            ->leftJoin('a.typeAnnonce', 'typeAnnonce')
            ->leftJoin('a.likes', 'likes')
            ->leftJoin('a.rating', 'rating')
            ->addSelect('category')
            ->addSelect('quartier')
            ->addSelect('user')
            ->addSelect('caracteristiques')
            ->addSelect('galleries')
            ->addSelect('typeAnnonce')
            ->addSelect('likes')
            ->addSelect('rating');
        if ($ville) {
            $query = $query->leftJoin('quartier.ville', 'ville')
                ->addSelect('ville')
                ->where('ville.nom = :ville')
                ->setParameter('ville', $ville);
        }
        if ($findByType) {
            if (!$typeAnnonce) {
                throw new \Exception('typeAnnonce is required');
            }
            $query->andWhere('typeAnnonce.valeur = :type')
                ->setParameter('type', $typeAnnonce);
        }
        return $query;
    }


    /**
     * @param bool $findByType
     * @param null $typeAnnonce
     * @return \Doctrine\ORM\QueryBuilder
     * @throws \Exception
     */
    private function queryInNotVilleFindAll($ville, $findByType = false, $typeAnnonce = null)
    {
        $query = $this->createQueryBuilder('a')
            ->leftJoin('a.category', 'category')
            ->leftJoin('a.quartier', 'quartier')
            ->leftJoin('a.user', 'user')
            ->leftJoin('a.caracteristiques', 'caracteristiques')
            ->leftJoin('a.galleries', 'galleries')
            ->leftJoin('a.typeAnnonce', 'typeAnnonce')
            ->leftJoin('a.likes', 'likes')
            ->leftJoin('a.rating', 'rating')
            ->addSelect('category')
            ->addSelect('quartier')
            ->addSelect('user')
            ->addSelect('caracteristiques')
            ->addSelect('galleries')
            ->addSelect('typeAnnonce')
            ->addSelect('likes')
            ->addSelect('rating')
            ->leftJoin('quartier.ville', 'ville')
            ->addSelect('ville')
            ->where('ville.nom != :ville')
            ->setParameter('ville', $ville);;
        if ($findByType) {
            if (!$typeAnnonce) {
                throw new \Exception('typeAnnonce is required');
            }
            $query->andWhere('typeAnnonce.valeur = :type')
                ->setParameter('type', $typeAnnonce);
        }
        return $query;
    }


    public function getAnnonceEnVedette($ville = null)
    {
        $q = $this->queryAnnonceEnVedetteInVille($ville);
        $result = $q->getQuery()->execute();
//        if (count($result) < 50) {
//            $result = array_merge($result, $this->queryAnnonceEnVedetteInNotVille($ville)->getQuery()->execute());
//        }
        return $result;
    }

    private function queryAnnonceEnVedetteInVille($ville)
    {
        return $this->createQueryBuilder('a')
            ->leftJoin('a.category', 'category')
            ->leftJoin('a.quartier', 'quartier')
            ->leftJoin('a.user', 'user')
            ->leftJoin('a.caracteristiques', 'caracteristiques')
            ->leftJoin('a.galleries', 'galleries')
            ->leftJoin('a.typeAnnonce', 'typeAnnonce')
            ->leftJoin('a.likes', 'likes')
            ->leftJoin('a.rating', 'rating')
            ->addSelect('category')
            ->addSelect('quartier')
            ->addSelect('user')
            ->addSelect('caracteristiques')
            ->addSelect('galleries')
            ->addSelect('typeAnnonce')
            ->addSelect('likes')
            ->addSelect('rating')
            ->addSelect('count(likes.id) as u')
            ->leftJoin('quartier.ville', 'ville')
            ->addSelect('ville')
            ->where('ville.nom = :ville')
            ->setParameter('ville', $ville)
            ->groupBy('a.id')
//            ->having('count(user.id) > 0')
            ->orderBy('u', 'desc')
            ->setMaxResults(50);
    }

    private function queryAnnonceEnVedetteInNotVille($ville)
    {
        return $this->createQueryBuilder('a')
            ->leftJoin('a.category', 'category')
            ->leftJoin('a.quartier', 'quartier')
            ->leftJoin('a.user', 'user')
            ->leftJoin('a.caracteristiques', 'caracteristiques')
            ->leftJoin('a.galleries', 'galleries')
            ->leftJoin('a.typeAnnonce', 'typeAnnonce')
            ->leftJoin('a.likes', 'likes')
            ->leftJoin('a.rating', 'rating')
            ->addSelect('category')
            ->addSelect('quartier')
            ->addSelect('user')
            ->addSelect('caracteristiques')
            ->addSelect('galleries')
            ->addSelect('typeAnnonce')
            ->addSelect('likes')
            ->addSelect('rating')
            ->addSelect('count(likes.id) as u')
            ->leftJoin('quartier.ville', 'ville')
            ->addSelect('ville')
            ->where('ville.nom != :ville')
            ->setParameter('ville', $ville)
            ->groupBy('a.id')
//            ->having('count(user.id) > 0')
            ->orderBy('u', 'desc');
    }

    private function queryAnnoncePlusNoterInVille($ville)
    {
        return $this->createQueryBuilder('a')
            ->leftJoin('a.category', 'category')
            ->leftJoin('a.quartier', 'quartier')
            ->leftJoin('a.user', 'user')
            ->leftJoin('a.caracteristiques', 'caracteristiques')
            ->leftJoin('a.galleries', 'galleries')
            ->leftJoin('a.typeAnnonce', 'typeAnnonce')
            ->leftJoin('a.likes', 'likes')
            ->leftJoin('a.rating', 'rating')
            ->addSelect('category')
            ->addSelect('quartier')
            ->addSelect('user')
            ->addSelect('caracteristiques')
            ->addSelect('galleries')
            ->addSelect('typeAnnonce')
            ->addSelect('likes')
            ->addSelect('rating')
            ->addSelect('sum(rating.ratingValue) / count(rating.id) as moyenne')
            ->leftJoin('quartier.ville', 'ville')
            ->addSelect('ville')
            ->where('ville.nom = :ville')
            ->setParameter('ville', $ville)
            ->groupBy('a.id')
            ->orderBy('moyenne', 'desc');
    }

    private function queryAnnoncePlusNoterInNotVille($ville)
    {
        return $this->createQueryBuilder('a')
            ->leftJoin('a.category', 'category')
            ->leftJoin('a.quartier', 'quartier')
            ->leftJoin('a.user', 'user')
            ->leftJoin('a.caracteristiques', 'caracteristiques')
            ->leftJoin('a.galleries', 'galleries')
            ->leftJoin('a.typeAnnonce', 'typeAnnonce')
            ->leftJoin('a.likes', 'likes')
            ->leftJoin('a.rating', 'rating')
            ->addSelect('category')
            ->addSelect('quartier')
            ->addSelect('user')
            ->addSelect('caracteristiques')
            ->addSelect('galleries')
            ->addSelect('typeAnnonce')
            ->addSelect('likes')
            ->addSelect('rating')
            ->addSelect('sum(rating.ratingValue) / count(rating.id) as moyenne')
            ->leftJoin('quartier.ville', 'ville')
            ->addSelect('ville')
            ->where('ville.nom != :ville')
            ->setParameter('ville', $ville)
            ->groupBy('a.id')
            ->orderBy('moyenne', 'desc');
    }

    public function getMoyenneRating($id)
    {
        $q = $this->createQueryBuilder('a')
            ->leftJoin('a.rating', 'rating')
            ->addSelect('sum(rating.ratingValue) / count(rating.id) as moyenne')
            ->where('a.id = :id')
            ->setParameter('id', $id)
            ->groupBy('a.id')
            ->getQuery()
            ->execute();
        return (int)$q[0]['moyenne'];
    }


    public function getAnnoncePlusNote($ville = null)
    {
        $q = $this->queryAnnoncePlusNoterInVille($ville);
        $result = $q->getQuery()->execute();
//        if (count($result) < 50) {
//            $result = array_merge($result, $this->queryAnnoncePlusNoterInNotVille($ville)->getQuery()->execute());
//        }
        return $result;
    }

    public function getProprieteFavorite($user)
    {
        $query = $this->queryInVilleFindAll();
        $q = $query->where($query->expr()->in('likes', $user));
        return $q->getQuery();
    }

    public function getProprieteById($user)
    {
        $query = $this->queryInVilleFindAll();
        $query = $query->where('user.id = :id')
            ->setParameter('id', $user);
        return $query->getQuery()->execute();
    }

}
