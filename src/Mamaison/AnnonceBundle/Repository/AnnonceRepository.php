<?php

namespace Mamaison\AnnonceBundle\Repository;

use Doctrine\ORM\Tools\Pagination\Paginator;
use http\Exception\InvalidArgumentException;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;

/**
 * AnnonceRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AnnonceRepository extends \Doctrine\ORM\EntityRepository
{

    public function findByWithPagination(array $criteria, $page,$nbMaxParPage)
    {
        if (!is_numeric($page)) {
            throw new InvalidArgumentException(
                'La valeur de l\'argument $page est incorrecte (valeur : ' . $page . ').'
            );
        }

        if ($page < 1) {
            throw new NotFoundHttpException('La page demandée n\'existe pas');
        }

        if (!is_numeric($nbMaxParPage)) {
            throw new InvalidArgumentException(
                'La valeur de l\'argument $nbMaxParPage est incorrecte (valeur : ' . $nbMaxParPage . ').'
            );
        }

        $qb = $this->createQueryBuilder('a')
            ->leftJoin('a.galleries','galleries')
            ->leftJoin('a.likes','likes')
            ->leftJoin('a.rating','rating')
            ->leftJoin('a.caracteristiques','caracteristiques')
            ->leftJoin('a.user','user')
            ->leftJoin('a.quartier','quartier')
            ->leftJoin('a.typeAnnonce','typeAnnonce')
            ->leftJoin('a.category','category')
            ->addSelect('galleries')
            ->addSelect('likes')
            ->addSelect('rating')
            ->addSelect('caracteristiques')
            ->addSelect('user')
            ->addSelect('typeAnnonce')
            ->addSelect('category')
            ->where($criteria);

        $query = $qb->getQuery();
        $premierResultat = ($page - 1) * $nbMaxParPage;
        $query->setFirstResult($premierResultat)->setMaxResults($nbMaxParPage);
        $paginator = new Paginator($query);

        if ( ($paginator->count() <= $premierResultat) && $page != 1) {
            throw new NotFoundHttpException('La page demandée n\'existe pas.'); // page 404, sauf pour la première page
        }

        return $paginator;
    }


    public function findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
    {
        return parent::findBy($criteria, $orderBy, $limit, $offset); // TODO: Change the autogenerated stub
    }

    public function getAnnonceEnVedette(){
        return $this->createQueryBuilder('a')
            ->leftJoin('a.likes','user')
            ->addSelect('count(user.id) as u')
            ->addSelect('user')
            ->groupBy('a.id')
//            ->having('count(user.id) > 0')
            ->orderBy('u','desc')
            ->getQuery()
            ->execute();
    }

    public function getMoyenneRating($id){
        $q =  $this->createQueryBuilder('a')
            ->leftJoin('a.rating','rating')
            ->addSelect('sum(rating.ratingValue) / count(rating.id) as moyenne')
            ->where('a.id = :id')
            ->setParameter('id',$id)
            ->groupBy('a.id')
            ->getQuery()
            ->execute();
        return (int) $q[0]['moyenne'];
    }


    public function getAnnoncePlusNote(){
        return $this->createQueryBuilder('a')
            ->leftJoin('a.rating','rating')
            ->addSelect('sum(rating.ratingValue) / count(rating.id) as moyenne')
            ->groupBy('a.id')
            ->orderBy('moyenne','desc')
            ->getQuery()
            ->execute();
    }
}
